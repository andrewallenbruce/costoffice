tidytable::summarise(n = tidytable::n.(),
pop = sum(pop, na.rm = TRUE),
pop_density = mean(pop_density, na.rm = TRUE),
med_income = stats::median(med_income, na.rm = TRUE))
costoffice::zip_db |>
tidytable::unnest(demo)
costoffice::zip_db |>
tidytable::unnest(demo) |>
tidytable::group_by(state) |>
tidytable::summarise(n = tidytable::n.(),
pop = sum(pop, na.rm = TRUE))
costoffice::zip_db |>
tidytable::unnest(demo) |>
tidytable::group_by(state) |>
tidytable::summarise(n = tidytable::n.(),
pop = sum(pop, na.rm = TRUE),
pop_density = mean(pop_density, na.rm = TRUE))
costoffice::zip_db |>
tidytable::unnest(demo) |>
tidytable::group_by(state) |>
tidytable::summarise(n = tidytable::n.(),
pop = sum(pop, na.rm = TRUE),
pop_density = mean(pop_density, na.rm = TRUE),
med_income = median(med_income, na.rm = TRUE))
costoffice::zip_db |>
tidytable::unnest(demo) |>
tidytable::group_by(state) |>
tidytable::summarise(no_zips = tidytable::n.(),
pop_sum = sum(pop, na.rm = TRUE),
mean_pop_dens = mean(pop_density, na.rm = TRUE),
med_income = median(med_income, na.rm = TRUE))
gc()
devtools::build_rmd("README.Rmd")
devtools::load_all(".")
x <- download_datasets(specialty = "vascular surgery")
library(rpolars)
write.csv(x,my_file)
my_file <- tempfile()
write.csv(x,my_file)
lazy_frame <- rpolars:::lazy_csv_reader(path=my_file)
lazy_frame$collect()
unlink(my_file)
gc()
devtools::load_all(".")
cardio <- download_datasets(specialty = "cardiology") |> head(n = 10)
cardio
cardio <- search_datasets(specialty = "cardiology")
cardio
cardio |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename)
names_helper <- function(x) {
x |>
stringr::str_replace_all(x, "_", " ") |>
stringr::str_to_lower(x)
}
cardio |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename, names_helper)
cardio |>
tidytable::select(csv_url) |>
tibble::deframe()
card  <- cardio |>
tidytable::select(csv_url) |>
tibble::deframe()
card
card  <- cardio |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename)
card
names_helper <- function(x) {
stringr::str_replace_all(x, "_", " ") |>
stringr::str_to_lower(x)
}
cardio |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename, names_helper)
names_helper <- function(x) {
stringr::str_replace_all(x, "_", " ")
stringr::str_to_lower(x)
}
cardio |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename, names_helper)
cardio |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename, tolower)
cardio |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename)
cardio |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename) |>
names_helper()
cardio |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(dirname)
card  <- cardio |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename)
names(card)
gc()
download_datasets <- function(specialty = NULL,
keyword   = NULL,
zipcoder  = TRUE,
drop_na   = TRUE,
full      = FALSE) {
results <- search_datasets(specialty = specialty,
keyword   = keyword) |>
# tidytable::select(csv_url) |>
# tibble::deframe() |>
# rlang::set_names(basename) |>
purrr::map(download_dataset) |>
purrr::list_rbind() |>
# tidytable::separate_wider_delim(filename,
#                                 delim = ".",
#                                 names = c("specialty", "ext")) |>
# tidytable::mutate(ext = NULL,
#                   specialty = stringr::str_replace_all(specialty, "_", " "),
#                   specialty = stringr::str_to_lower(specialty)) |>
# tidytable::relocate(specialty)
if (isTRUE(zipcoder)) {
results <- results |> use_zipcoder(drop_na = drop_na, full = full)
}
df_size(results)
return(results)
}
download_datasets <- function(specialty = NULL,
keyword   = NULL,
zipcoder  = TRUE,
drop_na   = TRUE,
full      = FALSE) {
results <- search_datasets(specialty = specialty,
keyword   = keyword) |>
# tidytable::select(csv_url) |>
# tibble::deframe() |>
# rlang::set_names(basename) |>
purrr::map(download_dataset) |>
purrr::list_rbind()
# tidytable::separate_wider_delim(filename,
#                                 delim = ".",
#                                 names = c("specialty", "ext")) |>
# tidytable::mutate(ext = NULL,
#                   specialty = stringr::str_replace_all(specialty, "_", " "),
#                   specialty = stringr::str_to_lower(specialty)) |>
# tidytable::relocate(specialty)
if (isTRUE(zipcoder)) {
results <- results |> use_zipcoder(drop_na = drop_na, full = full)
}
df_size(results)
return(results)
}
.datatable.aware <- TRUE
download_datasets(specialty = "vascular surgery")
search_datasets(specialty = "vascular surgery") |>
download_dataset()
devtools::load_all(".")
search_datasets(specialty = "vascular surgery") |>
download_dataset()
download_datasets(specialty = "vascular surgery")
devtools::load_all(".")
search_datasets(specialty = "vascular surgery") |>
download_dataset()
download_datasets(specialty = "vascular surgery")
download_datasets <- function(specialty = NULL,
keyword   = NULL,
zipcoder  = TRUE,
drop_na   = TRUE,
full      = FALSE) {
results <- search_datasets(specialty = specialty,
keyword   = keyword) |>
# tidytable::select(csv_url) |>
# tibble::deframe() |>
# rlang::set_names(basename) |>
purrr::map(download_dataset) |>
purrr::list_rbind()
# tidytable::separate_wider_delim(filename,
#                                 delim = ".",
#                                 names = c("specialty", "ext")) |>
# tidytable::mutate(ext = NULL,
#                   specialty = stringr::str_replace_all(specialty, "_", " "),
#                   specialty = stringr::str_to_lower(specialty)) |>
# tidytable::relocate(specialty)
if (isTRUE(zipcoder)) {
results <- results |> use_zipcoder(drop_na = drop_na, full = full)
}
df_size(results)
return(results)
}
download_datasets(specialty = "vascular surgery")
devtools::load_all(".")
download_datasets_new <- function(specialty = NULL,
keyword   = NULL,
zipcoder  = TRUE,
drop_na   = TRUE,
full      = FALSE) {
data <- search_datasets(specialty = specialty,
keyword   = keyword)
# tidytable::select(csv_url) |>
# tibble::deframe() |>
# rlang::set_names(basename) |>
results <- purrr::pmap(list(df = data,
urlcol = csv_url,
sp_col = specialty),
download_dataset) |>
purrr::list_rbind()
# tidytable::separate_wider_delim(filename,
#                                 delim = ".",
#                                 names = c("specialty", "ext")) |>
# tidytable::mutate(ext = NULL,
#                   specialty = stringr::str_replace_all(specialty, "_", " "),
#                   specialty = stringr::str_to_lower(specialty)) |>
# tidytable::relocate(specialty)
if (isTRUE(zipcoder)) {
results <- results |> use_zipcoder(drop_na = drop_na, full = full)
}
df_size(results)
return(results)
}
search_datasets(specialty = "vascular surgery") |>
download_dataset()
search_datasets(specialty = "vascular surgery") |>
download_dataset(csv_url, specialty)
search_datasets(specialty = "vascular surgery") |>
download_dataset(.data, csv_url, specialty)
devtools::load_all(".")
download_datasets_new <- function(specialty = NULL,
keyword   = NULL,
zipcoder  = TRUE,
drop_na   = TRUE,
full      = FALSE) {
data <- search_datasets(specialty = specialty,
keyword   = keyword)
# tidytable::select(csv_url) |>
# tibble::deframe() |>
# rlang::set_names(basename) |>
results <- purrr::pmap(list(df = data,
urlcol = csv_url,
sp_col = specialty),
download_dataset) |>
purrr::list_rbind()
# tidytable::separate_wider_delim(filename,
#                                 delim = ".",
#                                 names = c("specialty", "ext")) |>
# tidytable::mutate(ext = NULL,
#                   specialty = stringr::str_replace_all(specialty, "_", " "),
#                   specialty = stringr::str_to_lower(specialty)) |>
# tidytable::relocate(specialty)
if (isTRUE(zipcoder)) {
results <- results |> use_zipcoder(drop_na = drop_na, full = full)
}
df_size(results)
return(results)
}
search_datasets(specialty = "vascular surgery") |>
download_dataset(.data, urlcol = csv_url, spcol = specialty)
download_datasets_new(specialty = "vascular surgery")
download_datasets_new <- function(specialty = NULL,
keyword   = NULL,
zipcoder  = TRUE,
drop_na   = TRUE,
full      = FALSE) {
data <- search_datasets(specialty = specialty,
keyword   = keyword)
# tidytable::select(csv_url) |>
# tibble::deframe() |>
# rlang::set_names(basename) |>
results <- purrr::pmap(list(df = data,
urlcol = "csv_url",
sp_col = "specialty"),
download_dataset) |>
purrr::list_rbind()
# tidytable::separate_wider_delim(filename,
#                                 delim = ".",
#                                 names = c("specialty", "ext")) |>
# tidytable::mutate(ext = NULL,
#                   specialty = stringr::str_replace_all(specialty, "_", " "),
#                   specialty = stringr::str_to_lower(specialty)) |>
# tidytable::relocate(specialty)
if (isTRUE(zipcoder)) {
results <- results |> use_zipcoder(drop_na = drop_na, full = full)
}
df_size(results)
return(results)
}
download_datasets_new(specialty = "vascular surgery")
devtools::load_all(".")
.datatable.aware <- TRUE
search_datasets(specialty = "addiction medicine") |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename) |>
download_dataset_purr()
search_datasets(specialty = "addiction medicine") |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename) |>
download_dataset_purrr()
search_datasets(specialty = "addiction medicine") |>
arrow::read_csv_arrow()
search_datasets(specialty = "addiction medicine")
search_datasets(specialty = "addiction medicine") |>
arrow::read_csv_arrow(csv_url)
search_datasets(specialty = "addiction medicine") |>
arrow::read_csv_arrow("csv_url")
search_datasets(specialty = "addiction medicine") |>
arrow::read_csv_arrow(.data$csv_url)
rlang::.data
search_datasets(specialty = "addiction medicine") |>
arrow::read_csv_arrow(rlang::.data$csv_url)
x <- search_datasets(specialty = "addiction medicine")
download_arrow <- function(df) {
arrow::read_csv_arrow(rlang::.data$csv_url)}
download_arrow(x)
paths <- search_datasets(specialty = "addiction medicine")$specialty
paths
paths <- search_datasets(specialty = "addiction medicine")$csv_url
paths
con <- DBI::dbConnect(duckdb::duckdb())
duckdb::duckdb_read_csv(con, "addiction_medicine", paths)
arrow::read_csv_arrow(paths)
csv <- arrow::read_csv_arrow(paths)
con <- DBI::dbConnect(duckdb::duckdb())
duckdb::duckdb_read_csv(con, "addiction_medicine", csv)
gc()
medicine <- download_datasets(keyword = "medicine")
arrow::write_csv_arrow(medicine, file = "D:/medicine.csv")
con <- DBI::dbConnect(duckdb::duckdb())
source("~/.active-rstudio-document", echo=TRUE)
duckdb::dbListTables(con)
con <- DBI::dbConnect(duckdb::duckdb())
duckdb::duckdb_read_csv(con, "addiction_medicine", "D:/medicine.csv")
source("~/.active-rstudio-document", echo=TRUE)
duckdb::dbListTables(con)
con |> dplyr::tbl("addiction_medicine")
duckdb::duckdb_shutdown(con)
duckdb::dbDisconnect(con, shutdown = TRUE)
medicine <- download_datasets(keyword = "medicine")
devtools::load_all(".")
addiction_medicine <- download_datasets(specialty = "addiction medicine")
devtools::load_all(".")
download_datasets(specialty = "addiction medicine")
download_datasets(specialty = "addiction medicine")
write_datasets <- function(specialty = NULL,
keyword   = NULL,
zipcoder  = TRUE,
drop_na   = TRUE,
full      = FALSE) {
search_datasets(specialty = specialty,
keyword   = keyword) |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename) |>
purrr::map(download_dataset_purrr) |>
purrr::list_rbind(names_to = "filename") |>
tidytable::separate_wider_delim(filename,
delim = ".",
names = c("specialty", "ext")) |>
tidytable::mutate(ext = NULL,
specialty = stringr::str_replace_all(specialty, "_", " "),
specialty = stringr::str_to_lower(specialty)) |>
tidytable::relocate(specialty) |>
use_zipcoder(drop_na = drop_na, full = full) |>
arrow::write_csv_arrow(results,
file = stringr::str_glue("D:/cost_office_csvs/{specialty}.csv"))
}
}
write_datasets <- function(specialty = NULL,
keyword   = NULL,
zipcoder  = TRUE,
drop_na   = TRUE,
full      = FALSE) {
search_datasets(specialty = specialty,
keyword   = keyword) |>
tidytable::select(csv_url) |>
tibble::deframe() |>
rlang::set_names(basename) |>
purrr::map(download_dataset_purrr) |>
purrr::list_rbind(names_to = "filename") |>
tidytable::separate_wider_delim(filename,
delim = ".",
names = c("specialty", "ext")) |>
tidytable::mutate(ext = NULL,
specialty = stringr::str_replace_all(specialty, "_", " "),
specialty = stringr::str_to_lower(specialty)) |>
tidytable::relocate(specialty) |>
use_zipcoder(drop_na = drop_na, full = full) |>
arrow::write_csv_arrow(
file = stringr::str_glue("D:/cost_office_csvs/{specialty}.csv"))
}
write_datasets(keyword = "medicine")
devtools::load_all(".")
write_datasets(keyword = "medicine")
tidytable::inv_gc()
tidytable::inv_gc()
gc()
devtools::load_all(".")
write_datasets(keyword = "medicine")
pak::pkg_install("elipousson/filenamr")
remotes::install_github('yonicd/tidycheckUsage')
tidycheckUsage::tidycheckUsagePackage("costoffice")
devtools::load_all(".")
tidycheckUsage::tidycheckUsagePackage("costoffice")
tidycheckUsage::tidycheckUsagePackage("costoffice") |> tibble::tibble() |> print(n = 80)
devtools::load_all(".")
search_datasets(keyword = "certified")
cert <- search_datasets(keyword = "certified")
certdl <- purrr::map(cert, download_dataset)
data.table::getDTthreads()
devtools::load_all(".")
certdl <- purrr::map(cert$csv_url, download_dataset_purrr)
certdl
devtools::load_all(".")
certdl <- purrr::map2(cert$csv_url, cert$specialty, download_dataset_purrr)
certdl
devtools::load_all(".")
gc()
write_datasets(keyword = "certified")
res$specialty
write_datasets <- function(specialty = NULL,
keyword   = NULL,
zipcoder  = TRUE,
drop_na   = TRUE,
full      = FALSE) {
res <- search_datasets(specialty = specialty,
keyword   = keyword)
dflst  <- purrr::map2(res$csv_url, res$specialty, download_dataset_purrr)
purrr::walk(dflst, tidytable::fwrite,
nThread = 4,
compress = "gzip",
file = paste0("D:/cost_office_csvs/", as.list(res$specialty), ".csv"))
tidytable::inv_gc()
}
.datatable.aware <- TRUE
write_datasets(keyword = "certified")
rlang::last_trace()
write_datasets <- function(specialty = NULL,
keyword   = NULL,
zipcoder  = TRUE,
drop_na   = TRUE,
full      = FALSE) {
res <- search_datasets(specialty = specialty,
keyword   = keyword)
dflst  <- purrr::map2(res$csv_url, res$specialty, download_dataset_purrr)
spec <- res$specialty
dfnames <- purrr::map(\(spec) paste0("D:/cost_office_csvs/", spec, ".csv"))
purrr::walk2(\(dflst, dfnames) tidytable::fwrite(x = dflst, file = dfnames, nThread = 4, compress = "gzip"))
tidytable::inv_gc()
}
.datatable.aware <- TRUE
write_datasets(keyword = "certified")
cert <- search_datasets(keyword = "certified")
gc()
res <- search_datasets(keyword = "certified")
dflst  <- purrr::map2(res$csv_url, res$specialty, download_dataset_purrr)
res$specialty
dflst
as.list(res$specialty)
rlang::as_list(res$specialty)
list(res$specialty)
c(res$specialty)
as.list(res$specialty)
spec <- as.list(res$specialty)
dfnames <- purrr::map(\(spec) paste0("D:/cost_office_csvs/", spec, ".csv"))
spec <- res$specialty
purrr::map(\(spec) paste0("D:/cost_office_csvs/", spec, ".csv"))
purrr::map(spec, paste0("D:/cost_office_csvs/", spec, ".csv"))
paste0("D:/cost_office_csvs/", spec, ".csv")
paste0("D:/cost_office_csvs/", res$specialty, ".csv") |> gsub(" ", "")
res$specialty
devtools::load_all(".")
write_datasets(keyword = "certified")
devtools::load_all(".")
write_datasets(keyword = "certified")
devtools::load_all(".")
write_datasets()
devtools::load_all(".")
write_datasets()
devtools::load_all(".")
write_datasets()
devtools::load_all(".")
search_datasets(specialty = "vascular surgery")
search_datasets(specialty = "vascular surgery") |> download_dataset()
search_datasets(specialty = "vascular surgery") |>
tidytable::select(csv_url) |>
tibble::deframe() |>
download_dataset_purrr(specialty = "vascular surgery")
search_datasets(specialty = "vascular surgery") |>
tidytable::select(csv_url) |>
tibble::deframe() |>
download_dataset_purrr(x = "vascular surgery")
download_datasets(specialty = "vascular surgery")
a <- search_datasets(specialty = "vascular surgery")
a[[1]]
a
a[[6]]
download_dataset(a)
gc()
download_datasets(specialty = "vascular surgery")
devtools::build_rmd("README.Rmd")
fledge::bump_version()
fledge::finalize_version(push = TRUE)
